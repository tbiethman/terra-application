{"version":3,"sources":["webpack:///./lib/terra-dev-site/doc/application/how-to.2/use-translated-strings.doc.mdx"],"names":["layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"iMAYMA,EAAc,GAIL,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,sBACD,OAAO,cALS,UAKT,OAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,mBAAQ,CACN,GAAM,iCADR,iCAGA,gCACE,mBAAGC,WAAW,cAAd,yBAAqD,uBAAGA,WAAW,KAAQ,CACvE,KAAQ,qHADyC,wBAArD,8EAKF,yCAAsB,uBAAGA,WAAW,KAAQ,CACxC,KAAQ,sGADU,mBAAtB,+EAGsD,uBAAGA,WAAW,KAAQ,CACxE,KAAQ,yIAD0C,kCAHtD,2BAOA,6FAA0E,uBAAGA,WAAW,KAAQ,CAC5F,KAAQ,4GAD8D,0BAA1E,4DAIA,yBAAK,0BAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,ymBAsBL,gCACE,mBAAGA,WAAW,cAAd,0BAAsD,uBAAGA,WAAW,KAAQ,CACxE,KAAQ,iDAD0C,wBAAtD,gBAEkD,wBAAQA,WAAW,KAAnB,mBAFlD,4JASNJ,EAAWK,gBAAiB","file":"75-e30b6d10821d077e3e19.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"how-to-use-translated-strings\"\n    }}>{`How To Use Translated Strings`}</h1>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Please review Terra's `}<a parentName=\"p\" {...{\n          \"href\": \"https://engineering.cerner.com/terra-ui/getting-started/terra-ui/internationalization/internationalization-intro\"\n        }}>{`Internationalization`}</a>{`\ndocumentation to ensure your application is configured to support i18n.`}</p>\n    </blockquote>\n    <p>{`Every child of `}<a parentName=\"p\" {...{\n        \"href\": \"/terra-application/components/terra-application/application/reference/components/application-base\"\n      }}>{`ApplicationBase`}</a>{` has access to the\napplication's translated strings. Please review Terra's `}<a parentName=\"p\" {...{\n        \"href\": \"https://engineering.cerner.com/terra-ui/getting-started/terra-ui/internationalization/building-components-which-include-translations\"\n      }}>{`recommended consumption guides`}</a>{`\nfor more information.`}</p>\n    <p>{`Additionally, ApplicateBase provides react-intl's APIs through the `}<a parentName=\"p\" {...{\n        \"href\": \"/terra-application/components/terra-application/application/reference/contexts/application-intl-context\"\n      }}>{`ApplicationIntlContext`}</a>{`\nfor consumers seeking a modern Context implementation.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React, { useContext } from 'react';\nimport { ApplicationIntlContext } from 'terra-application/lib/application-intl';\n\nconst ExampleComponent = () => {\n  const applicationIntl = useContext(ApplicationIntlContext);\n\n  return (\n    <div>\n      <p>This button requires multiple translated strings to render appropriately.</p>\n      <button\n        aria-label={applicationIntl.formatMessage({ id: 'example-component.button-label'})}\n      >\n        {applicationIntl.formatMessage({ id: 'example-component.button-text'})}\n      </button>\n    </div>\n  );\n});\n\nexport default ExampleComponent;\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Accessing react-intl's `}<a parentName=\"p\" {...{\n          \"href\": \"https://reactjs.org/docs/legacy-context.html\"\n        }}>{`legacy context value`}</a>{` directly is `}<strong parentName=\"p\">{`not recommended`}</strong>{`.\nThis API is deprecated and not provided by react-intl v3.x. Terra's recommended usage patterns are supported by versions 2.x and 3.x of react-intl.`}</p>\n    </blockquote>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}