{"version":3,"sources":["webpack:///./lib/terra-dev-site/doc/application/how-to.2/show-modal-content.doc.mdx"],"names":["layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"iMAYMA,EAAc,GAIL,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,sBACD,OAAO,cALS,UAKT,OAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,mBAAQ,CACN,GAAM,6BADR,6BAGA,8BAAW,uBAAGC,WAAW,KAAQ,CAC7B,KAAQ,mGADD,gBAAX,yDAGA,0SAEF,uBAAGA,WAAW,KAAQ,CAChB,KAAQ,8GADd,4BAFE,KAKA,4QAEA,8WAGA,yBAAK,0BAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,2ZAkBL,2OAEA,yBAAK,0BAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,8pBA4BL,8KACA,yBAAK,0BAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,ykCA4CTJ,EAAWK,gBAAiB","file":"73-dcaea3b2779a32d800c4.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"how-to-show-modal-content\"\n    }}>{`How To Show Modal Content`}</h1>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"/terra-application/components/terra-application/application/reference/components/modal-manager\"\n      }}>{`ModalManager`}</a>{` should be used to manage modal content presentation.`}</p>\n    <p>{`A ModalManager should be rendered around content that requires modal disclosure capabilities. Multiple components can be wrapped with a single\nModalManager; every wrapped component (and their descendents) will communicate with the same ModalManager instance through the\n`}<a parentName=\"p\" {...{\n        \"href\": \"/terra-application/components/terra-application/application/reference/contexts/disclosure-manager-context\"\n      }}>{`DisclosureManagerContext`}</a>{`.`}</p>\n    <p>{`Components rendered within the ModalManager's modal will be able to access the same Contexts as the ModalManager itself.\nAdditional Context providers rendered within the ModalManager's children will not be available to the modal components.`}</p>\n    <p>{`The rendering of a ModalManager is typically an application-level concern. However, additional ModalManagers may be rendered to re-establish\nthe contexts available to disclosed contents. Before rendering a ModalManager yourself, please ensure that the application isn't already providing\na ModalManager that suits your component's needs.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React from 'react';\nimport ApplicationBase from 'terra-application/lib/application-base';\nimport ModalManager from 'terra-application/lib/modal-manager';\n\nimport ComponentWithModal from './ComponentWithModal';\n\nconst ExampleApp = () => (\n  <ApplicationBase>\n    <ModalManager>\n      <ComponentWithModal />\n    </ModalManager>\n  </ApplicationBase>\n);\n\nexport default ExampleComponent;\n`}</code></pre>\n    <p>{`Components rendered within a ModalManager should access the value provided by the DisclosureManagerContext. That value contains APIs used\nto communicate with the ModalManager and disclose additional content.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React, { useContext } from 'react';\nimport { DisclosureManagerContext } from 'terra-application/lib/disclosure-manager';\n\nimport ModalContentComponent from './ModalContentComponent';\n\nconst ComponentWithModal = () => {\n  const disclosureManager = useContext(DisclosureManagerContext);\n\n  return (\n    <button\n      onClick={() => {\n        disclosureManager.disclose({\n          preferredType: 'modal',\n          size: 'large',\n          content: {\n            key: 'component-with-modal.modal-content',\n            component: <ModalContentComponent />,\n          },\n        });\n      }}\n    >\n      Show Modal\n    </button>\n  );\n};\n`}</code></pre>\n    <p>{`Components that need more control over the presentation of the modal have access to additional APIs that are returned upon a successful disclosure.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React, { useContext, useRef } from 'react';\nimport { DisclosureManagerContext } from 'terra-application/lib/disclosure-manager';\n\nimport ModalContentComponent from './ModalContentComponent';\n\nconst ComponentWithModal = () => {\n  const disclosureManager = useContext(DisclosureManagerContext);\n  const modalDismissRef = useRef();\n\n  return (\n    <button\n      onClick={() => {\n        disclosureManager.disclose({\n          preferredType: 'modal',\n          size: 'large',\n          content: {\n            key: 'component-with-modal.modal-content',\n            component: (\n              <ModalContentComponent\n                onSubmit={() => {\n                  if (modalDismissRef.current) {\n                    modalDismissRef.current();\n                    modalDismissRef.current = undefined;\n                  }\n                }}\n              />\n            ),\n          },\n        }).then(({ dismissDisclosure }) => {\n          modalDismissRef.current = dismissDisclosure;\n        });\n      }}\n    >\n      Show Modal\n    </button>\n  );\n};\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}