{"version":3,"sources":["webpack:///./lib/terra-dev-site/doc/application/reference.1/contexts/ActiveBreakpointContext.doc.mdx"],"names":["layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"gMAYMA,EAAc,GAIL,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,sBACD,OAAO,cALS,UAKT,OAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,mBAAQ,CACN,GAAM,2BADR,2BAGA,wKACA,gCACE,mBAAGC,WAAW,cAAd,4DAAwF,uBAAGA,WAAW,KAAQ,CAC1G,KAAQ,sGAD4E,mBAAxF,0IAKF,mBAAQ,CACN,GAAM,iBADR,iBAGA,yBAAK,0BAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,uGAQTJ,EAAWK,gBAAiB","file":"77-56e690c60c16ff86e2e4.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"activebreakpointcontext\"\n    }}>{`ActiveBreakpointContext`}</h1>\n    <p>{`The ActiveBreakpointContext defines an interface for access to the framework's determined active breakpoint based on the current window size.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note: An ActiveBreakpointContext.Provider is rendered by `}<a parentName=\"p\" {...{\n          \"href\": \"/terra-application/components/terra-application/application/reference/components/application-base\"\n        }}>{`ApplicationBase`}</a>{`.\nAny components rendered within ApplicationBase can access an ActiveBreakpointContext value without rendering additional providers.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"context-value\"\n    }}>{`Context Value`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const contextShape = PropTypes.oneOf(['tiny', 'small', 'medium', 'large', 'huge', 'enormous']);\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}