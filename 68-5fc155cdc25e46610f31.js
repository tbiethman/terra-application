(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{926:function(a,n,e){"use strict";e.r(n),e.d(n,"default",(function(){return c}));var t=e(18),o=e.n(t),i=e(24),p=e.n(i),r=(e(0),e(281)),l={};function c(a){var n=a.components,e=p()(a,["components"]);return Object(r.mdx)("wrapper",o()({},l,e,{components:n,mdxType:"MDXLayout"}),Object(r.mdx)("h1",{id:"how-to-show-loading-overlays"},"How To Show Loading Overlays"),Object(r.mdx)("p",null,"Loading overlays can be rendered within the framework by rendering an ",Object(r.mdx)("a",o()({parentName:"p"},{href:"/terra-application/application/terra-application/components/application-loading-overlay"}),"ApplicationLoadingOverlay")," component. Overlays will be rendered by the closest ancestor ",Object(r.mdx)("a",o()({parentName:"p"},{href:"/terra-application/application/terra-application/components/application-loading-overlay-provider"}),"ApplicationLoadingOverlayProvider"),". All content rendered within the responsding ApplicationLoadingOverlayProvider will be overlaid."),Object(r.mdx)("pre",null,Object(r.mdx)("code",o()({parentName:"pre"},{className:"language-jsx"}),"import React, { useState } from 'react';\nimport ApplicationLoadingOverlay from 'terra-application/lib/application-loading-overlay';\n\nconst ExampleComponent = () => {\n  const [isLoading, setIsLoading] = useState(false);\n\n  return (\n    <div>\n      <p>This component toggles a loading state that lasts for 3 seconds.</p>\n      <p>\n        <button type=\"button\" onClick={() => {\n          setIsLoading(true);\n\n          setTimeout(() => {\n            setIsLoading(false);\n          }, 3000);\n        }}>\n          Start Loading\n        </button>\n      </p>\n      <ApplicationLoadingOverlay isOpen={isLoading} />\n    </div>\n  );\n};\n\nexport default ExampleComponent;\n")),Object(r.mdx)("p",null,"Any component that wants to create an overlay container for its children can render its own ",Object(r.mdx)("a",o()({parentName:"p"},{href:"/terra-application/application/terra-application/components/application-loading-overlay-provider"}),"ApplicationLoadingOverlayProvider")," to scope overlay presentation to that container."),Object(r.mdx)("blockquote",null,Object(r.mdx)("p",{parentName:"blockquote"},"Note: ApplicationLoadingOverlayProviders are provided by ",Object(r.mdx)("a",o()({parentName:"p"},{href:"/terra-application/application/terra-application/components/application-base"}),"ApplicationBase"),", ",Object(r.mdx)("a",o()({parentName:"p"},{href:"/terra-application/application/terra-application/components/application-navigation"}),"ApplicationNavigation"),", ",Object(r.mdx)("a",o()({parentName:"p"},{href:"/terra-application/application/terra-application/components/modal-manager"}),"ModalManager")," and the ",Object(r.mdx)("a",o()({parentName:"p"},{href:"/terra-application/application/terra-application/components/slide-panel-manager"}),"SlidePanelManager"),".")))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=68-5fc155cdc25e46610f31.js.map