// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ApplicationNavigation should render default element 1`] = `
<ApplicationNavigation
  notifications={Object {}}
  utilityItems={Array []}
>
  <ApplicationLoadingOverlayProvider>
    <ApplicationStatusOverlayProvider>
      <withPromptRegistration(NavigationPromptCheckpoint)>
        <InjectIntl(ApplicationErrorBoundary)>
          <Suspense
            fallback={
              <ApplicationLoadingOverlay
                backgroundStyle="clear"
                isOpen={true}
              />
            }
          />
        </InjectIntl(ApplicationErrorBoundary)>
      </withPromptRegistration(NavigationPromptCheckpoint)>
    </ApplicationStatusOverlayProvider>
  </ApplicationLoadingOverlayProvider>
</ApplicationNavigation>
`;

exports[`ApplicationNavigation should render with all props 1`] = `
<ApplicationNavigation
  activeNavigationItemKey="my-test-key"
  extensionItems={
    Array [
      Object {
        "icon": <span>
          my icon
        </span>,
        "key": "my-test-key-1",
        "text": "test-text-1",
      },
    ]
  }
  hero={
    <div>
      my test hero
    </div>
  }
  navigationItems={
    Array [
      Object {
        "key": "my-test-key",
        "text": "test-text",
      },
    ]
  }
  notifications={
    Object {
      "my-test-key-1": 3,
    }
  }
  onDrawerMenuStateChange={[MockFunction]}
  onSelectExtensionItem={[MockFunction]}
  onSelectHelp={[MockFunction]}
  onSelectLogout={[Function]}
  onSelectNavigationItem={[Function]}
  onSelectSettings={[MockFunction]}
  onSelectUtilityItem={[MockFunction]}
  titleConfig={
    Object {
      "title": "test-title",
    }
  }
  userConfig={
    Object {
      "detail": "user-detail",
      "imageSrc": "user-src",
      "initials": "user-initials",
      "name": "user-name",
    }
  }
  utilityItems={
    Array [
      Object {
        "icon": <span>
          my icon
        </span>,
        "key": "my-test-key-2",
        "text": "test-text-2",
      },
    ]
  }
>
  <ApplicationLoadingOverlayProvider>
    <ApplicationStatusOverlayProvider>
      <withPromptRegistration(NavigationPromptCheckpoint)>
        <InjectIntl(ApplicationErrorBoundary)>
          <Suspense
            fallback={
              <ApplicationLoadingOverlay
                backgroundStyle="clear"
                isOpen={true}
              />
            }
          >
            <div>
              test child content
            </div>
          </Suspense>
        </InjectIntl(ApplicationErrorBoundary)>
      </withPromptRegistration(NavigationPromptCheckpoint)>
    </ApplicationStatusOverlayProvider>
  </ApplicationLoadingOverlayProvider>
</ApplicationNavigation>
`;
