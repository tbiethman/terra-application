// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ApplicationBase should render with all props 1`] = `
<div
  className="application-base"
  data-terra-application-base={true}
>
  <ThemeProvider
    themeName="test-theme"
  >
    <ThemeContextProvider
      theme={
        Object {
          "className": "test-theme",
          "name": "test-theme",
        }
      }
    >
      <Base
        customMessages={
          Object {
            "custom": "messages",
          }
        }
        locale="en"
        strictMode={false}
        translationsLoadingPlaceholder={
          <div>
            placeholder
          </div>
        }
      >
        <InjectIntl(ApplicationErrorBoundary)>
          <InjectIntl(Component)>
            <ActiveBreakpointProvider>
              <withPromptRegistration(NavigationPromptCheckpoint)
                onPromptChange={[Function]}
              >
                <ApplicationLoadingOverlayProvider>
                  <ApplicationStatusOverlayProvider>
                    <Suspense
                      fallback={
                        <ApplicationLoadingOverlay
                          backgroundStyle="clear"
                          isOpen={true}
                        />
                      }
                    >
                      <div>
                        content
                      </div>
                    </Suspense>
                  </ApplicationStatusOverlayProvider>
                </ApplicationLoadingOverlayProvider>
              </withPromptRegistration(NavigationPromptCheckpoint)>
            </ActiveBreakpointProvider>
          </InjectIntl(Component)>
        </InjectIntl(ApplicationErrorBoundary)>
      </Base>
    </ThemeContextProvider>
  </ThemeProvider>
</div>
`;

exports[`ApplicationBase should render with minimal props 1`] = `
<div
  className="application-base fill"
  data-terra-application-base={true}
>
  <ThemeProvider>
    <ThemeContextProvider
      theme={
        Object {
          "className": undefined,
          "name": "terra-default-theme",
        }
      }
    >
      <Base
        customMessages={Object {}}
        locale="en"
        strictMode={false}
      >
        <InjectIntl(ApplicationErrorBoundary)>
          <InjectIntl(Component)>
            <ActiveBreakpointProvider>
              <withPromptRegistration(NavigationPromptCheckpoint)
                onPromptChange={[Function]}
              >
                <ApplicationLoadingOverlayProvider>
                  <ApplicationStatusOverlayProvider>
                    <Suspense
                      fallback={
                        <ApplicationLoadingOverlay
                          backgroundStyle="clear"
                          isOpen={true}
                        />
                      }
                    >
                      <div>
                        content
                      </div>
                    </Suspense>
                  </ApplicationStatusOverlayProvider>
                </ApplicationLoadingOverlayProvider>
              </withPromptRegistration(NavigationPromptCheckpoint)>
            </ActiveBreakpointProvider>
          </InjectIntl(Component)>
        </InjectIntl(ApplicationErrorBoundary)>
      </Base>
    </ThemeContextProvider>
  </ThemeProvider>
</div>
`;

exports[`ApplicationBase should render with the preferred browser local 1`] = `
<div
  className="application-base fill"
  data-terra-application-base={true}
>
  <ThemeProvider>
    <ThemeContextProvider
      theme={
        Object {
          "className": undefined,
          "name": "terra-default-theme",
        }
      }
    >
      <Base
        customMessages={Object {}}
        locale="en"
        strictMode={false}
      >
        <InjectIntl(ApplicationErrorBoundary)>
          <InjectIntl(Component)>
            <ActiveBreakpointProvider>
              <withPromptRegistration(NavigationPromptCheckpoint)
                onPromptChange={[Function]}
              >
                <ApplicationLoadingOverlayProvider>
                  <ApplicationStatusOverlayProvider>
                    <Suspense
                      fallback={
                        <ApplicationLoadingOverlay
                          backgroundStyle="clear"
                          isOpen={true}
                        />
                      }
                    >
                      <div>
                        content
                      </div>
                    </Suspense>
                  </ApplicationStatusOverlayProvider>
                </ApplicationLoadingOverlayProvider>
              </withPromptRegistration(NavigationPromptCheckpoint)>
            </ActiveBreakpointProvider>
          </InjectIntl(Component)>
        </InjectIntl(ApplicationErrorBoundary)>
      </Base>
    </ThemeContextProvider>
  </ThemeProvider>
</div>
`;
