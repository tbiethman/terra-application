{"version":3,"sources":["webpack:///./lib/terra-dev-site/doc/application/how-to.2/show-loading-overlays.doc.mdx"],"names":["layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"iMAYMA,EAAc,GAIL,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,sBACD,OAAO,cALS,UAKT,OAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,mBAAQ,CACN,GAAM,gCADR,gCAGA,gGAA6E,uBAAGC,WAAW,KAAQ,CAC/F,KAAQ,2HADiE,6BAA7E,iEAEwG,uBAAGA,WAAW,KAAQ,CAC1H,KAAQ,2HAD4F,qCAFxG,qGAKA,yBAAK,0BAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,urBA6BL,sHAAmG,uBAAGA,WAAW,KAAQ,CACrH,KAAQ,2HADuF,qCAAnG,qDAGA,gCACE,mBAAGA,WAAW,cAAd,4DAAwF,uBAAGA,WAAW,KAAQ,CAC1G,KAAQ,gHAD4E,mBAAxF,KAEkC,uBAAGA,WAAW,KAAQ,CACpD,KAAQ,6GADsB,gBAFlC,aAIuC,uBAAGA,WAAW,KAAQ,CACzD,KAAQ,mHAD2B,qBAJvC,OAYNJ,EAAWK,gBAAiB","file":"72-7ab63223624815e0be24.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"how-to-show-loading-overlays\"\n    }}>{`How To Show Loading Overlays`}</h1>\n    <p>{`Loading overlays can be rendered within the framework by rendering an `}<a parentName=\"p\" {...{\n        \"href\": \"/tbiethman/terra-application/components/terra-application/application/reference/components/application-loading-overlay\"\n      }}>{`ApplicationLoadingOverlay`}</a>{` component. Overlays will be rendered by the closest ancestor `}<a parentName=\"p\" {...{\n        \"href\": \"/tbiethman/terra-application/components/terra-application/application/reference/components/application-loading-overlay\"\n      }}>{`ApplicationLoadingOverlayProvider`}</a>{`. All content rendered within the responsding ApplicationLoadingOverlayProvider will be overlaid.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React, { useState } from 'react';\nimport ApplicationLoadingOverlay from 'terra-application/lib/application-loading-overlay';\n\nconst ExampleComponent = () => {\n  const [isLoading, setIsLoading] = useState(false);\n\n  return (\n    <div>\n      <p>This component toggles a loading state that lasts for 3 seconds.</p>\n      <p>\n        <button type=\"button\" onClick={() => {\n          setIsLoading(true);\n\n          setTimeout(() => {\n            setIsLoading(false);\n          }, 3000);\n        }}>\n          Start Loading\n        </button>\n      </p>\n      <ApplicationLoadingOverlay isOpen={isLoading} />\n    </div>\n  );\n};\n\nexport default ExampleComponent;\n`}</code></pre>\n    <p>{`Any component that wants to create an overlay container for its children can render its own `}<a parentName=\"p\" {...{\n        \"href\": \"/tbiethman/terra-application/components/terra-application/application/reference/components/application-loading-overlay\"\n      }}>{`ApplicationLoadingOverlayProvider`}</a>{` to scope overlay presentation to that container.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note: ApplicationLoadingOverlayProviders are provided by `}<a parentName=\"p\" {...{\n          \"href\": \"/tbiethman/terra-application/components/terra-application/application/reference/components/application-base\"\n        }}>{`ApplicationBase`}</a>{`, `}<a parentName=\"p\" {...{\n          \"href\": \"/tbiethman/terra-application/components/terra-application/application/reference/components/modal-manager\"\n        }}>{`ModalManager`}</a>{`, and the `}<a parentName=\"p\" {...{\n          \"href\": \"/tbiethman/terra-application/components/terra-application/application/reference/components/slide-panel-manager\"\n        }}>{`SlidePanelManager`}</a>{`.`}</p>\n    </blockquote>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}