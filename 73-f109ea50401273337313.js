(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{922:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return i}));var a=n(18),r=n.n(a),o=n(24),l=n.n(o),d=(n(0),n(281)),m={};function i(e){var t=e.components,n=l()(e,["components"]);return Object(d.mdx)("wrapper",r()({},m,n,{components:t,mdxType:"MDXLayout"}),Object(d.mdx)("h1",{id:"logger"},"Logger"),Object(d.mdx)("p",null,Object(d.mdx)("inlineCode",{parentName:"p"},"terra-application")," provides an override-able logger to handle error, info, and warning messages."),Object(d.mdx)("h2",{id:"usage"},"Usage"),Object(d.mdx)("p",null,"The logger works like the ",Object(d.mdx)("inlineCode",{parentName:"p"},"console")," for the ",Object(d.mdx)("inlineCode",{parentName:"p"},"warn"),", ",Object(d.mdx)("inlineCode",{parentName:"p"},"error"),", and ",Object(d.mdx)("inlineCode",{parentName:"p"},"info")," methods. By default the logger will send the messages to the corresponding console methods. In production, info and warning messages will be suppressed."),Object(d.mdx)("pre",null,Object(d.mdx)("code",r()({parentName:"pre"},{className:"language-js"}),"import logger from 'terra-application/lib/utils/logger';\n\nlogger.error('error');\nlogger.warn('warning');\nlogger.info('info');\n")),Object(d.mdx)("h2",{id:"overriding"},"Overriding"),Object(d.mdx)("p",null,"It may be desirable to override the default implementation of the logger. For example, logs could be sent to a server side log aggregator. The logger is a singleton and should only be overridden once per application. To override the logger implementation, use the ",Object(d.mdx)("inlineCode",{parentName:"p"},"initializeLogger")," function and provide a new function for the logger. All loggers must have a method signature of ",Object(d.mdx)("inlineCode",{parentName:"p"},"(obj1 [, obj2, ..., objN])"),", the same as the ",Object(d.mdx)("a",r()({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/API/Console/warn"}),"console.warn"),", ",Object(d.mdx)("a",r()({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/API/Console/error"}),"console.error"),", and ",Object(d.mdx)("a",r()({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/API/Console/info"}),"console.info")," methods."),Object(d.mdx)("pre",null,Object(d.mdx)("code",r()({parentName:"pre"},{className:"language-js"}),"import { initializeLogger } from 'terra-application/lib/logger';\n\ninitializeLogger({\n  onInfo: (...args) => console.log('[Info] ', ...args),\n  onWarn: (...args) => console.warn('[Warn] ', ...args),\n  onError: (...args) => console.log('[Error] ', ...args),\n});\n")),Object(d.mdx)("h2",{id:"api"},"API"),Object(d.mdx)("h3",{id:"logger-1"},"Logger"),Object(d.mdx)("table",null,Object(d.mdx)("thead",{parentName:"table"},Object(d.mdx)("tr",{parentName:"thead"},Object(d.mdx)("th",r()({parentName:"tr"},{align:null}),"method"),Object(d.mdx)("th",r()({parentName:"tr"},{align:null}),"syntax"),Object(d.mdx)("th",r()({parentName:"tr"},{align:null}),"Default Behaviour"))),Object(d.mdx)("tbody",{parentName:"table"},Object(d.mdx)("tr",{parentName:"tbody"},Object(d.mdx)("td",r()({parentName:"tr"},{align:null}),Object(d.mdx)("inlineCode",{parentName:"td"},"error")),Object(d.mdx)("td",r()({parentName:"tr"},{align:null}),Object(d.mdx)("inlineCode",{parentName:"td"},"Logger.error(obj1 [, obj2, ..., objN])")),Object(d.mdx)("td",r()({parentName:"tr"},{align:null}),"Logs an error to the console.")),Object(d.mdx)("tr",{parentName:"tbody"},Object(d.mdx)("td",r()({parentName:"tr"},{align:null}),Object(d.mdx)("inlineCode",{parentName:"td"},"info")),Object(d.mdx)("td",r()({parentName:"tr"},{align:null}),Object(d.mdx)("inlineCode",{parentName:"td"},"Logger.info(obj1 [, obj2, ..., objN])")),Object(d.mdx)("td",r()({parentName:"tr"},{align:null}),"Logs an info message to the console in a non production environment.")),Object(d.mdx)("tr",{parentName:"tbody"},Object(d.mdx)("td",r()({parentName:"tr"},{align:null}),Object(d.mdx)("inlineCode",{parentName:"td"},"warn")),Object(d.mdx)("td",r()({parentName:"tr"},{align:null}),Object(d.mdx)("inlineCode",{parentName:"td"},"Logger.warn(obj1 [, obj2, ..., objN])")),Object(d.mdx)("td",r()({parentName:"tr"},{align:null}),"Logs an warning message to the console in a non production environment.")))),Object(d.mdx)("h3",{id:"initializelogger"},"initializeLogger"),Object(d.mdx)("table",null,Object(d.mdx)("thead",{parentName:"table"},Object(d.mdx)("tr",{parentName:"thead"},Object(d.mdx)("th",r()({parentName:"tr"},{align:null}),"Key Name"),Object(d.mdx)("th",r()({parentName:"tr"},{align:null}),"Type"),Object(d.mdx)("th",r()({parentName:"tr"},{align:null}),"Is Required"),Object(d.mdx)("th",r()({parentName:"tr"},{align:null}),"DefaultValue"),Object(d.mdx)("th",r()({parentName:"tr"},{align:null}),"Description"))),Object(d.mdx)("tbody",{parentName:"table"},Object(d.mdx)("tr",{parentName:"tbody"},Object(d.mdx)("td",r()({parentName:"tr"},{align:null}),Object(d.mdx)("inlineCode",{parentName:"td"},"onInfo")),Object(d.mdx)("td",r()({parentName:"tr"},{align:null}),"function"),Object(d.mdx)("td",r()({parentName:"tr"},{align:null}),"optional"),Object(d.mdx)("td",r()({parentName:"tr"},{align:null}),"undefined"),Object(d.mdx)("td",r()({parentName:"tr"},{align:null}),"The method to override the default info logging method.")),Object(d.mdx)("tr",{parentName:"tbody"},Object(d.mdx)("td",r()({parentName:"tr"},{align:null}),Object(d.mdx)("inlineCode",{parentName:"td"},"onWarn")),Object(d.mdx)("td",r()({parentName:"tr"},{align:null}),"function"),Object(d.mdx)("td",r()({parentName:"tr"},{align:null}),"optional"),Object(d.mdx)("td",r()({parentName:"tr"},{align:null}),"undefined"),Object(d.mdx)("td",r()({parentName:"tr"},{align:null}),"The method to override the default warning logging method.")),Object(d.mdx)("tr",{parentName:"tbody"},Object(d.mdx)("td",r()({parentName:"tr"},{align:null}),Object(d.mdx)("inlineCode",{parentName:"td"},"onError")),Object(d.mdx)("td",r()({parentName:"tr"},{align:null}),"function"),Object(d.mdx)("td",r()({parentName:"tr"},{align:null}),"optional"),Object(d.mdx)("td",r()({parentName:"tr"},{align:null}),"undefined"),Object(d.mdx)("td",r()({parentName:"tr"},{align:null}),"The method to override the default error logging method.")))))}i.isMDXComponent=!0}}]);
//# sourceMappingURL=73-f109ea50401273337313.js.map